# ---------------------------------
# All merged
#----------------------------------

services:
  atomspace-api:
    build: 
      context: ./custom-atomspace-builder
      dockerfile: Dockerfile
    container_name: atomspace-api
    ports:
      - "${API_PORT:-8000}:${API_PORT:-8000}"
    environment:
      - NEO4J_HOST=neo4j
      - NEO4J_PORT=7687
      - NEO4J_BOLT_PORT=7687
      - HUGEGRAPH_HOST=hugegraph
      - HUGEGRAPH_PORT=8080
      - HUGEGRAPH_GRAPH=hugegraph
      - ANNOTATION_SERVICE_URL=http://annotation_service:5800/annotation/load
    volumes:
      - ./custom-atomspace-builder/output:/app/output
      - ./custom-atomspace-builder/config.yaml:/app/config.yaml
      - atomspace_logs:/app/logs
      - shared_output:/shared/output
    depends_on:
      neo4j:
        condition: service_healthy
      hugegraph:
        condition: service_started
    networks:
      - atomspace-network
    restart: always

  neo4j:
    image: neo4j:5.15.0 
    container_name: neo4j-atomspace
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"

    environment:
      - NEO4J_AUTH=${NEO4J_USERNAME:-neo4j}/${NEO4J_PASSWORD:-atomspace123}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_dbms_security_allow__csv__import__from__file__urls=true
      - NEO4J_server_directories_import=/var/lib/neo4j/import
      - NEO4J_server_memory_heap_initial__size=${NEO4J_HEAP_INITIAL:-512m}
      - NEO4J_server_memory_heap_max__size=${NEO4J_HEAP_MAX:-2G}
      - NEO4J_server_memory_pagecache_size=${NEO4J_PAGECACHE:-1G}
      - NEO4J_server_config_strict__validation_enabled=false
      - NEO4J_server_default__listen__address=0.0.0.0

    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - shared_output:/var/lib/neo4j/import/shared/output
      - neo4j_plugins:/plugins
    networks:
      - atomspace-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "${NEO4J_USERNAME}", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3


  hugegraph:
    image: hugegraph/hugegraph:1.5.0
    container_name: hugegraph-atomspace
    ports:
      - "${HUGEGRAPH_REST_PORT:-8080}:8080"
      - "${HUGEGRAPH_GREMLIN_PORT:-8182}:8182"
    environment:
      - HUGEGRAPH_CONF=/hugegraph/conf
    volumes:
      - hugegraph_data:/hugegraph/data
      - hugegraph_logs:/hugegraph/logs
    networks:
      - atomspace-network
    restart: unless-stopped

# Annotation Query Backend General
  annotation_service:
    # image: "${DOCKER_HUB_REPO}"
    build:
      context: ./annotation-query-backend-general
      dockerfile: Dockerfile
    container_name: annotation_service
    volumes:
      - ./annotation-query-backend-general:/app
      - ./custom-atomspace-builder/output:/shared/output
      # - "${SCHEMA_DATA_VOLUME}"
    ports:
      - "${APP_PORT}:${APP_PORT}"
    # for now use development server till we can figure out
    # a way to make it work with gunicorn
    # command: gunicorn -w 16 --bind 0.0.0.0:${APP_PORT} run:app
    command: python run.py
    restart: always
    depends_on:
      - mongodb
      - redis
    environment:
      - MONGO_URI=${MONGO_URI}
      - APP_PORT=${APP_PORT}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - atomspace-network

  mongodb:
    image: mongo:latest
    volumes:
      - mongo_data:/data/db
    ports:
      - "${MONGODB_DOCKER_PORT}:27017"
    restart: always
    networks:
      - atomspace-network

  redis:
    image: redis:latest
    ports:
      - "6390:6379"
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - atomspace-network

  caddy:
    image: caddy:latest
    ports:
      - "${CADDY_PORT}:${CADDY_PORT_FORWARD}"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    command: caddy reverse-proxy --from http://0.0.0.0:${CADDY_PORT} --to http://annotation_service:${APP_PORT}
    restart: always
    depends_on:
      - annotation_service
    networks:
      - atomspace-network


volumes:
  # Custom Atomspace Builder
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  hugegraph_data:
  hugegraph_logs:
  atomspace_logs:
  shared_output:
  # Annotation Query Backend General
  mongo_data:
  redis_data:
  caddy_data:
  caddy_config:

networks:
  atomspace-network:
    driver: bridge
